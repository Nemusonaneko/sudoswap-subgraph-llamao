// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get pairIds(): Array<string> {
    let value = this.get("pairIds");
    return value!.toStringArray();
  }

  set pairIds(value: Array<string>) {
    this.set("pairIds", Value.fromStringArray(value));
  }

  get pairs(): Array<string> | null {
    let value = this.get("pairs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pairs(value: Array<string> | null) {
    if (!value) {
      this.unset("pairs");
    } else {
      this.set("pairs", Value.fromStringArray(<Array<string>>value));
    }
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }
}

export class NewPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewPair", id.toString(), this);
    }
  }

  static load(id: string): NewPair | null {
    return changetype<NewPair | null>(store.get("NewPair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get nft(): string {
    let value = this.get("nft");
    return value!.toString();
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get initialBondingCurve(): Bytes {
    let value = this.get("initialBondingCurve");
    return value!.toBytes();
  }

  set initialBondingCurve(value: Bytes) {
    this.set("initialBondingCurve", Value.fromBytes(value));
  }

  get initialDelta(): BigInt {
    let value = this.get("initialDelta");
    return value!.toBigInt();
  }

  set initialDelta(value: BigInt) {
    this.set("initialDelta", Value.fromBigInt(value));
  }

  get initialFee(): BigInt {
    let value = this.get("initialFee");
    return value!.toBigInt();
  }

  set initialFee(value: BigInt) {
    this.set("initialFee", Value.fromBigInt(value));
  }

  get initialSpot(): BigInt {
    let value = this.get("initialSpot");
    return value!.toBigInt();
  }

  set initialSpot(value: BigInt) {
    this.set("initialSpot", Value.fromBigInt(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get bondingCurve(): Bytes | null {
    let value = this.get("bondingCurve");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bondingCurve(value: Bytes | null) {
    if (!value) {
      this.unset("bondingCurve");
    } else {
      this.set("bondingCurve", Value.fromBytes(<Bytes>value));
    }
  }

  get delta(): BigInt | null {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delta(value: BigInt | null) {
    if (!value) {
      this.unset("delta");
    } else {
      this.set("delta", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get spot(): BigInt | null {
    let value = this.get("spot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set spot(value: BigInt | null) {
    if (!value) {
      this.unset("spot");
    } else {
      this.set("spot", Value.fromBigInt(<BigInt>value));
    }
  }

  get sellPrice(): BigInt | null {
    let value = this.get("sellPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sellPrice(value: BigInt | null) {
    if (!value) {
      this.unset("sellPrice");
    } else {
      this.set("sellPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialAttributes(): string {
    let value = this.get("initialAttributes");
    return value!.toString();
  }

  set initialAttributes(value: string) {
    this.set("initialAttributes", Value.fromString(value));
  }

  get updateEvents(): Array<string> {
    let value = this.get("updateEvents");
    return value!.toStringArray();
  }

  set updateEvents(value: Array<string>) {
    this.set("updateEvents", Value.fromStringArray(value));
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }
}

export class UpdateEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UpdateEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateEvent", id.toString(), this);
    }
  }

  static load(id: string): UpdateEvent | null {
    return changetype<UpdateEvent | null>(store.get("UpdateEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string {
    let value = this.get("pair");
    return value!.toString();
  }

  set pair(value: string) {
    this.set("pair", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get newDelta(): BigInt {
    let value = this.get("newDelta");
    return value!.toBigInt();
  }

  set newDelta(value: BigInt) {
    this.set("newDelta", Value.fromBigInt(value));
  }

  get newFee(): BigInt {
    let value = this.get("newFee");
    return value!.toBigInt();
  }

  set newFee(value: BigInt) {
    this.set("newFee", Value.fromBigInt(value));
  }

  get newSpot(): BigInt {
    let value = this.get("newSpot");
    return value!.toBigInt();
  }

  set newSpot(value: BigInt) {
    this.set("newSpot", Value.fromBigInt(value));
  }

  get newSellPrice(): BigInt | null {
    let value = this.get("newSellPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set newSellPrice(value: BigInt | null) {
    if (!value) {
      this.unset("newSellPrice");
    } else {
      this.set("newSellPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdBlock(): BigInt {
    let value = this.get("createdBlock");
    return value!.toBigInt();
  }

  set createdBlock(value: BigInt) {
    this.set("createdBlock", Value.fromBigInt(value));
  }

  get createdTimestamp(): BigInt {
    let value = this.get("createdTimestamp");
    return value!.toBigInt();
  }

  set createdTimestamp(value: BigInt) {
    this.set("createdTimestamp", Value.fromBigInt(value));
  }
}
